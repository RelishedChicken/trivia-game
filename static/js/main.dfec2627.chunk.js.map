{"version":3,"sources":["components/Question.js","components/AnswerGrid.js","components/ScoreBoard.js","components/App.js","index.js"],"names":["Question","className","this","props","questionText","difficulty","category","React","Component","AnswerGrid","disabled","buttonsDisabled","onClick","verifyAnswer","answers","type","ScoreBoard","correct","incorrect","App","state","question","correctAnswer","wrongAnswers","multipleChoice","questionLoaded","allCategories","value","chosenCategory","questionType","chosenDifficulty","nCorrect","nWrong","getCategories","fetch","then","res","json","jsonData","trivia_categories","i","length","push","id","name","getQuestion","qData","realDifficulty","results","substring","toUpperCase","allAnswers","incorrect_answers","decode","correct_answer","shuffleArray","incorrectAnswers","map","e","setState","allButtons","$","style","backgroundColor","textContent","console","log","setTimeout","target","updateOptions","preventDefault","text","DOMParser","parseFromString","documentElement","array","randomnumber","temp","count","Math","random","onSubmit","ReactDOM","render","document","getElementById"],"mappings":"oNAoBeA,E,uKAhBP,OACI,mCACI,qBAAKC,UAAU,oBAAf,SACI,sBAAKA,UAAU,cAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BC,KAAKC,MAAMC,eACzC,sBAAKH,UAAU,iBAAf,UACI,oBAAGA,UAAU,iBAAb,yBAA2CC,KAAKC,MAAME,cACtD,oBAAGJ,UAAU,iBAAb,uBAAyCC,KAAKC,MAAMG,0B,GATzDC,IAAMC,WCoBdC,E,uKAjBP,OACI,qBAAKR,UAAU,sBAAf,SACI,sBAAKA,UAAU,aAAf,UACI,wBAAQS,SAAUR,KAAKC,MAAMQ,gBAAiBC,QAASV,KAAKC,MAAMU,aAAcZ,UAAU,eAA1F,SAA0GC,KAAKC,MAAMW,QAAQ,KAC7H,wBAAQJ,SAAUR,KAAKC,MAAMQ,gBAAiBC,QAASV,KAAKC,MAAMU,aAAcZ,UAAU,eAA1F,SAA0GC,KAAKC,MAAMW,QAAQ,KAC5HZ,KAAKC,MAAMY,MACR,qCACI,wBAAQL,SAAUR,KAAKC,MAAMQ,gBAAiBC,QAASV,KAAKC,MAAMU,aAAcZ,UAAU,eAA1F,SAA0GC,KAAKC,MAAMW,QAAQ,KAC7H,wBAAQJ,SAAUR,KAAKC,MAAMQ,gBAAiBC,QAASV,KAAKC,MAAMU,aAAcZ,UAAU,eAA1F,SAA0GC,KAAKC,MAAMW,QAAQ,iB,GAXhIP,IAAMC,WCehBQ,E,uKAZP,OACI,qBAAKf,UAAU,sBAAf,SACI,sBAAKA,UAAU,aAAf,UACI,qBAAIA,UAAU,QAAd,sBAAgCC,KAAKC,MAAMc,WAC3C,qBAAIhB,UAAU,QAAd,wBAAkCC,KAAKC,MAAMe,sB,GAPxCX,IAAMC,W,gBC2KhBW,E,4MArKXC,MAAQ,CACJC,SAAU,GACVP,QAAS,CAAC,GAAG,GAAG,GAAG,IACnBQ,cAAe,GACfC,aAAc,CAAC,GAAG,GAAG,IACrBjB,SAAU,GACVD,WAAY,GACZmB,gBAAgB,EAChBC,gBAAgB,EAChBd,iBAAiB,EACjBe,cAAe,CAAC,wBAAQC,MAAM,GAAd,kBAChBC,eAAgB,GAChBC,aAAc,GACdC,iBAAkB,GAClBC,SAAU,EACVC,OAAQ,G,EA6BZC,cAAgB,WACZC,MAAM,wCAAwCC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAACG,GAExE,IADA,IAAIZ,EAAgBY,EAASC,kBACrBC,EAAE,EAAEA,EAAEd,EAAce,OAAOD,IAC/B,EAAKpB,MAAMM,cAAcgB,KAAK,wBAAQf,MAAOD,EAAcc,GAAGG,GAAhC,SAAqCjB,EAAcc,GAAGI,Y,EAMhGC,YAAc,WACV,IAAIC,EACJZ,MAAM,uCAAuC,EAAKd,MAAMQ,eAAe,EAAKR,MAAMS,aAAa,EAAKT,MAAMU,kBAAkBK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAACG,GAGtJ,IAAIS,GADJD,EAAQR,EAASU,QAAQ,IACE3C,WAAW4C,UAAU,EAAE,GAAGC,cAAgBJ,EAAMzC,WAAW4C,UAAU,EAAEH,EAAMzC,WAAWoC,QAC/GU,EAAaL,EAAMM,kBACvBD,EAAWT,KAAK,EAAKW,OAAOP,EAAMQ,iBAClCH,EAAa,EAAKI,aAAaJ,GAC/B,IAAIK,EAAmBV,EAAMM,kBAAkBK,KAAI,SAAAC,GAAC,OAAE,EAAKL,OAAOK,MAGlE,EAAKC,SAAS,CACVtC,SAAU,EAAKgC,OAAOP,EAAMzB,UAC5BP,QAASqC,EACT7C,SAAU,EAAK+C,OAAOP,EAAMxC,UAC5BD,WAAY0C,EACZzB,cAAe,EAAK+B,OAAOP,EAAMQ,gBACjC/B,aAAciC,EACdhC,eAA+B,aAAfsB,EAAM/B,KACtBU,gBAAgB,EAChBd,iBAAiB,IAKrB,IADA,IAAIiD,EAAaC,IAAE,iBACXrB,EAAE,EAAEA,EAAEoB,EAAWnB,OAAOD,IAC5BoB,EAAWpB,GAAGsB,MAAMC,gBAAkB,c,EAMlDlD,aAAe,SAAC6C,GAEZ,IADA,IAAIE,EAAaC,IAAE,iBACXrB,EAAE,EAAEA,EAAEoB,EAAWnB,OAAOD,IACzBoB,EAAWpB,GAAGwB,cAAgB,EAAK5C,MAAME,cACxCsC,EAAWpB,GAAGsB,MAAMC,gBAAkB,QAEtCH,EAAWpB,GAAGsB,MAAMC,gBAAkB,MAG9C,EAAKJ,SAAS,CACVhD,iBAAiB,IAErBsD,QAAQC,IAAI,EAAK9C,OACjB+C,YAAW,WAAK,EAAKtB,gBAAe,MACjCa,EAAEU,OAAOJ,cAAgB,EAAK5C,MAAME,cACnC,EAAKqC,SAAS,CACV5B,SAAU,EAAKX,MAAMW,SAAW,IAGpC,EAAK4B,SAAS,CACV3B,OAAQ,EAAKZ,MAAMY,OAAS,K,EAMxCqC,cAAgB,SAACX,GACbA,EAAEY,iBACFL,QAAQC,IAAIR,EAAEU,QACd,EAAKT,SAAS,CACV/B,eAAgB,aAAa8B,EAAEU,OAAO,GAAGzC,MACzCE,aAAc,SAAS6B,EAAEU,OAAO,GAAGzC,MACnCG,iBAAkB,eAAe4B,EAAEU,OAAO,GAAGzC,MAC7CI,SAAU,EACVC,OAAQ,GACT,EAAKa,c,kEAtGR3C,KAAK2C,cACL3C,KAAK+B,kB,6BAIFsC,GACH,OAAO,IAAIC,WAAYC,gBAAgBF,EAAK,aAAaG,gBAAgBV,c,mCAIhEW,GAIT,IAHA,IACIC,EACAC,EAFAC,EAAQH,EAAMlC,OAGXqC,GACHF,EAAeG,KAAKC,SAAWF,IAAU,EACzCD,EAAOF,EAAMG,GACbH,EAAMG,GAASH,EAAMC,GACrBD,EAAMC,GAAgBC,EAE1B,OAAOF,I,+BAsFP,OACI,sBAAK1E,UAAU,eAAf,UACI,sBAAKA,UAAU,UAAf,UACI,oBAAIA,UAAU,QAAd,2BACA,oBAAIA,UAAU,WAAd,qBACA,qBAAKA,UAAU,UAAf,SACI,uBAAMgF,SAAU/E,KAAKmE,cAArB,UACI,uBAAOpE,UAAU,eAAjB,sBACA,wBAAQ2C,KAAK,iBAAiBD,GAAG,aAAa1C,UAAU,iBAAxD,SACKC,KAAKkB,MAAMM,gBAEhB,uBAAOzB,UAAU,eAAjB,kBACA,yBAAQ2C,KAAK,eAAe3C,UAAU,iBAAtC,UACI,wBAAQ0B,MAAM,GAAd,iBACA,wBAAQA,MAAM,WAAd,6BACA,wBAAQA,MAAM,UAAd,6BAEJ,uBAAO1B,UAAU,eAAjB,wBACA,yBAAQ2C,KAAK,eAAe3C,UAAU,iBAAtC,UACI,wBAAQ0B,MAAM,GAAd,iBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,OAAd,qBAEJ,wBAAQ1B,UAAU,eAAlB,oCAIZ,sBAAKA,UAAU,UAAf,UACI,cAAC,EAAD,CAAUG,aAAcF,KAAKkB,MAAMC,SAAUhB,WAAYH,KAAKkB,MAAMf,WAAYC,SAAUJ,KAAKkB,MAAMd,WACrG,cAAC,EAAD,CAAYS,KAAMb,KAAKkB,MAAMI,eAAgBb,gBAAiBT,KAAKkB,MAAMT,gBAAiBE,aAAcX,KAAKW,aAAcC,QAASZ,KAAKkB,MAAMN,QAASQ,cAAepB,KAAKkB,MAAME,cAAekC,iBAAkBtD,KAAKkB,MAAMgC,oBAC9N,cAAC,EAAD,CAAYnC,QAASf,KAAKkB,MAAMW,SAAUb,UAAWhB,KAAKkB,MAAMY,mB,GA/JlEzB,IAAMC,W,MCDxB0E,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.dfec2627.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Question extends React.Component{\r\n    render(){\r\n        return(\r\n            <>\r\n                <div className=\"questionContainer\">\r\n                    <div className=\"questionBox\">\r\n                        <h2 className=\"questionText\">{this.props.questionText}</h2>\r\n                        <div className=\"informationBox\">\r\n                            <p className=\"informationBit\">Difficulty: {this.props.difficulty}</p>\r\n                            <p className=\"informationBit\">Category: {this.props.category}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Question;","import React from \"react\";\r\n\r\nclass AnswerGrid extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"answerGridContainer\">\r\n                <div className=\"answerGrid\">\r\n                    <button disabled={this.props.buttonsDisabled} onClick={this.props.verifyAnswer} className=\"answerButton\">{this.props.answers[0]}</button>\r\n                    <button disabled={this.props.buttonsDisabled} onClick={this.props.verifyAnswer} className=\"answerButton\">{this.props.answers[1]}</button>\r\n                    {this.props.type && (\r\n                        <>\r\n                            <button disabled={this.props.buttonsDisabled} onClick={this.props.verifyAnswer} className=\"answerButton\">{this.props.answers[2]}</button>\r\n                            <button disabled={this.props.buttonsDisabled} onClick={this.props.verifyAnswer} className=\"answerButton\">{this.props.answers[3]}</button>\r\n                        </>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AnswerGrid;","import React from \"react\";\r\n\r\nclass ScoreBoard extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"scoreBoardContainer\">\r\n                <div className=\"scoreBoard\">\r\n                    <h3 className=\"score\">Correct: {this.props.correct}</h3>\r\n                    <h3 className=\"score\">Incorrect: {this.props.incorrect}</h3>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default ScoreBoard;","import React from \"react\";\r\nimport Question from \"./Question\";\r\nimport AnswerGrid from \"./AnswerGrid\";\r\nimport ScoreBoard from \"./ScoreBoard\";\r\nimport $ from \"jquery\";\r\n\r\nclass App extends React.Component{\r\n\r\n    state = {\r\n        question: \"\",\r\n        answers: [\"\",\"\",\"\",\"\"],\r\n        correctAnswer: \"\",\r\n        wrongAnswers: [\"\",\"\",\"\"],\r\n        category: \"\",\r\n        difficulty: \"\",\r\n        multipleChoice: false,\r\n        questionLoaded: false,\r\n        buttonsDisabled: false,\r\n        allCategories: [<option value=\"\">Any</option>],\r\n        chosenCategory: \"\",\r\n        questionType: \"\",\r\n        chosenDifficulty: \"\",\r\n        nCorrect: 0,\r\n        nWrong: 0\r\n    }\r\n\r\n    //Trigger to load question and categories\r\n    componentDidMount(){\r\n        this.getQuestion();\r\n        this.getCategories();\r\n    }\r\n\r\n    //Helper function to decode HTML special chars\r\n    decode(text){\r\n        return new DOMParser().parseFromString(text,\"text/html\").documentElement.textContent;\r\n    }\r\n\r\n    //Used to shuffle the answers so correct answer is in a random place\r\n    shuffleArray(array){\r\n        var count = array.length,\r\n            randomnumber,\r\n            temp;\r\n        while( count ){\r\n            randomnumber = Math.random() * count-- | 0;\r\n            temp = array[count];\r\n            array[count] = array[randomnumber];\r\n            array[randomnumber] = temp;\r\n        }\r\n        return array;\r\n    }\r\n\r\n    //Get all categories from the Trivia API\r\n    getCategories = () => {\r\n        fetch(\"https://opentdb.com/api_category.php\").then(res => res.json()).then((jsonData) => {\r\n            var allCategories = jsonData.trivia_categories;\r\n            for(var i=0;i<allCategories.length;i++){\r\n                this.state.allCategories.push(<option value={allCategories[i].id}>{allCategories[i].name}</option>);\r\n            }\r\n        })\r\n    }\r\n\r\n    //Get quetsion data from the Trivia API\r\n    getQuestion = () => {\r\n        var qData;\r\n        fetch(\"https://opentdb.com/api.php?amount=1\"+this.state.chosenCategory+this.state.questionType+this.state.chosenDifficulty).then(res => res.json()).then((jsonData) => {\r\n            //Get question data and clean up for use in web-app\r\n            qData = jsonData.results[0];\r\n            var realDifficulty = qData.difficulty.substring(0,1).toUpperCase() + qData.difficulty.substring(1,qData.difficulty.length);\r\n            var allAnswers = qData.incorrect_answers;\r\n            allAnswers.push(this.decode(qData.correct_answer));\r\n            allAnswers = this.shuffleArray(allAnswers);\r\n            var incorrectAnswers = qData.incorrect_answers.map(e=>this.decode(e));\r\n\r\n            //Save the question in App state\r\n            this.setState({\r\n                question: this.decode(qData.question),\r\n                answers: allAnswers,\r\n                category: this.decode(qData.category),\r\n                difficulty: realDifficulty,\r\n                correctAnswer: this.decode(qData.correct_answer),\r\n                wrongAnswers: incorrectAnswers,\r\n                multipleChoice: qData.type === \"multiple\" ? true : false,\r\n                questionLoaded: true,\r\n                buttonsDisabled: false,\r\n            });\r\n\r\n            //Set the button backgrounds back to normal (for when buttons show answers)\r\n            var allButtons = $(\".answerButton\");\r\n            for(var i=0;i<allButtons.length;i++){\r\n                allButtons[i].style.backgroundColor = \"#603385\";\r\n            }\r\n        });       \r\n    }\r\n\r\n    //Check if selected answer is correct and to handle showing answers\r\n    verifyAnswer = (e) =>{\r\n        var allButtons = $(\".answerButton\");\r\n        for(var i=0;i<allButtons.length;i++){\r\n            if(allButtons[i].textContent === this.state.correctAnswer){\r\n                allButtons[i].style.backgroundColor = \"green\";\r\n            }else{\r\n                allButtons[i].style.backgroundColor = \"red\";\r\n            }\r\n        }\r\n        this.setState({\r\n            buttonsDisabled: true\r\n        });\r\n        console.log(this.state);\r\n        setTimeout(()=>{this.getQuestion()},3400);\r\n        if(e.target.textContent === this.state.correctAnswer){\r\n            this.setState({\r\n                nCorrect: this.state.nCorrect + 1\r\n            })\r\n        }else{\r\n            this.setState({\r\n                nWrong: this.state.nWrong + 1\r\n            })\r\n        }\r\n    }\r\n    \r\n    //Parse new options and generate new question & reset score\r\n    updateOptions = (e) => {\r\n        e.preventDefault();\r\n        console.log(e.target);\r\n        this.setState({\r\n            chosenCategory: \"&category=\"+e.target[0].value,\r\n            questionType: \"&type=\"+e.target[1].value,\r\n            chosenDifficulty: \"&difficulty=\"+e.target[2].value,\r\n            nCorrect: 0,\r\n            nWrong: 0\r\n        }, this.getQuestion);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"appContainer\">\r\n                <div className=\"menuCol\">\r\n                    <h1 className=\"title\">Tricky Trivia</h1>\r\n                    <h3 className=\"subtitle\">Options</h3>\r\n                    <div className=\"options\">\r\n                        <form onSubmit={this.updateOptions}>\r\n                            <label className=\"optionsLabel\">Category</label>\r\n                            <select name=\"chosenCategory\" id=\"categories\" className=\"optionDropdown\">\r\n                                {this.state.allCategories}\r\n                            </select>\r\n                            <label className=\"optionsLabel\">Type</label>\r\n                            <select name=\"questionType\" className=\"optionDropdown\">\r\n                                <option value=\"\">Any</option>\r\n                                <option value=\"multiple\">Multiple Choice</option>\r\n                                <option value=\"boolean\">True / False</option>\r\n                            </select>\r\n                            <label className=\"optionsLabel\">Difficulty</label>\r\n                            <select name=\"questionType\" className=\"optionDropdown\">\r\n                                <option value=\"\">Any</option>\r\n                                <option value=\"easy\">Easy</option>\r\n                                <option value=\"medium\">Medium</option>\r\n                                <option value=\"hard\">Hard</option>\r\n                            </select>\r\n                            <button className=\"submitButton\">Get Questions!</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                <div className=\"content\">\r\n                    <Question questionText={this.state.question} difficulty={this.state.difficulty} category={this.state.category}/>\r\n                    <AnswerGrid type={this.state.multipleChoice} buttonsDisabled={this.state.buttonsDisabled} verifyAnswer={this.verifyAnswer} answers={this.state.answers} correctAnswer={this.state.correctAnswer} incorrectAnswers={this.state.incorrect_answers} />\r\n                    <ScoreBoard correct={this.state.nCorrect} incorrect={this.state.nWrong} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport \"./App.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}