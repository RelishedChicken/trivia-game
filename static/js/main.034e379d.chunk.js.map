{"version":3,"sources":["components/Question.js","components/AnswerGrid.js","components/App.js","index.js"],"names":["Question","className","this","props","questionText","difficulty","category","React","Component","AnswerGrid","disabled","buttonsDisabled","onClick","verifyAnswer","answers","type","App","state","question","correctAnswer","wrongAnswers","multipleChoice","questionLoaded","allCategories","value","chosenCategory","questionType","getCategories","fetch","then","res","json","jsonData","trivia_categories","i","length","push","id","name","getQuestion","qData","realDifficulty","results","substring","toUpperCase","allAnswers","incorrect_answers","decode","correct_answer","shuffleArray","incorrectAnswers","map","e","setState","allButtons","$","style","backgroundColor","textContent","console","log","setTimeout","updateOptions","preventDefault","target","text","DOMParser","parseFromString","documentElement","array","randomnumber","temp","count","Math","random","onSubmit","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.034e379d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Question extends React.Component{\r\n    render(){\r\n        return(\r\n            <>\r\n                <div className=\"questionContainer\">\r\n                    <div className=\"questionBox\">\r\n                        <h2 className=\"questionText\">{this.props.questionText}</h2>\r\n                        <div className=\"informationBox\">\r\n                            <p className=\"informationBit\">Difficulty: {this.props.difficulty}</p>\r\n                            <p className=\"informationBit\">Category: {this.props.category}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Question;","import React from \"react\";\r\n\r\nclass AnswerGrid extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"answerGridContainer\">\r\n                <div className=\"answerGrid\">\r\n                    <button disabled={this.props.buttonsDisabled} onClick={this.props.verifyAnswer} className=\"answerButton\">{this.props.answers[0]}</button>\r\n                    <button disabled={this.props.buttonsDisabled} onClick={this.props.verifyAnswer} className=\"answerButton\">{this.props.answers[1]}</button>\r\n                    {this.props.type && (\r\n                        <>\r\n                            <button disabled={this.props.buttonsDisabled} onClick={this.props.verifyAnswer} className=\"answerButton\">{this.props.answers[2]}</button>\r\n                            <button disabled={this.props.buttonsDisabled} onClick={this.props.verifyAnswer} className=\"answerButton\">{this.props.answers[3]}</button>\r\n                        </>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AnswerGrid;","import React from \"react\";\r\nimport Question from \"./Question\";\r\nimport AnswerGrid from \"./AnswerGrid\";\r\nimport $ from \"jquery\";\r\n\r\nclass App extends React.Component{\r\n\r\n    state = {\r\n        question: \"\",\r\n        answers: [\"\",\"\",\"\",\"\"],\r\n        correctAnswer: \"\",\r\n        wrongAnswers: [\"\",\"\",\"\"],\r\n        category: \"\",\r\n        difficulty: \"\",\r\n        multipleChoice: false,\r\n        questionLoaded: false,\r\n        buttonsDisabled: false,\r\n        allCategories: [<option value=\"\">Any</option>],\r\n        chosenCategory: \"\",\r\n        questionType: \"\",\r\n    }\r\n\r\n    //Trigger to load question and categories\r\n    componentDidMount(){\r\n        this.getQuestion();\r\n        this.getCategories();\r\n    }\r\n\r\n    //Helper function to decode HTML special chars\r\n    decode(text){\r\n        return new DOMParser().parseFromString(text,\"text/html\").documentElement.textContent;\r\n    }\r\n\r\n    //Used to shuffle the answers so correct answer is in a random place\r\n    shuffleArray(array){\r\n        var count = array.length,\r\n            randomnumber,\r\n            temp;\r\n        while( count ){\r\n            randomnumber = Math.random() * count-- | 0;\r\n            temp = array[count];\r\n            array[count] = array[randomnumber];\r\n            array[randomnumber] = temp;\r\n        }\r\n        return array;\r\n    }\r\n\r\n    //Get all categories from the Trivia API\r\n    getCategories = () => {\r\n        fetch(\"https://opentdb.com/api_category.php\").then(res => res.json()).then((jsonData) => {\r\n            var allCategories = jsonData.trivia_categories;\r\n            for(var i=0;i<allCategories.length;i++){\r\n                this.state.allCategories.push(<option value={allCategories[i].id}>{allCategories[i].name}</option>);\r\n            }\r\n        })\r\n    }\r\n\r\n    //Get quetsion data from the Trivia API\r\n    getQuestion = () => {\r\n        var qData;\r\n        fetch(\"https://opentdb.com/api.php?amount=1\"+this.state.chosenCategory+this.state.questionType).then(res => res.json()).then((jsonData) => {\r\n            //Get question data and clean up for use in web-app\r\n            qData = jsonData.results[0];\r\n            var realDifficulty = qData.difficulty.substring(0,1).toUpperCase() + qData.difficulty.substring(1,qData.difficulty.length);\r\n            var allAnswers = qData.incorrect_answers;\r\n            allAnswers.push(this.decode(qData.correct_answer));\r\n            allAnswers = this.shuffleArray(allAnswers);\r\n            var incorrectAnswers = qData.incorrect_answers.map(e=>this.decode(e));\r\n\r\n            //Save the question in App state\r\n            this.setState({\r\n                question: this.decode(qData.question),\r\n                answers: allAnswers,\r\n                category: this.decode(qData.category),\r\n                difficulty: realDifficulty,\r\n                correctAnswer: this.decode(qData.correct_answer),\r\n                wrongAnswers: incorrectAnswers,\r\n                multipleChoice: qData.type === \"multiple\" ? true : false,\r\n                questionLoaded: true,\r\n                buttonsDisabled: false\r\n            });\r\n\r\n            //Set the button backgrounds back to normal (for when buttons show answers)\r\n            var allButtons = $(\".answerButton\");\r\n            for(var i=0;i<allButtons.length;i++){\r\n                allButtons[i].style.backgroundColor = \"#603385\";\r\n            }\r\n        });       \r\n    }\r\n\r\n    //Check if selected answer is correct and to handle showing answers\r\n    verifyAnswer = (e) =>{\r\n        var allButtons = $(\".answerButton\");\r\n        for(var i=0;i<allButtons.length;i++){\r\n            if(allButtons[i].textContent === this.state.correctAnswer){\r\n                allButtons[i].style.backgroundColor = \"green\";\r\n            }else{\r\n                allButtons[i].style.backgroundColor = \"red\";\r\n            }\r\n        }\r\n        this.setState({\r\n            buttonsDisabled: true\r\n        });\r\n        console.log(this.state);\r\n        setTimeout(()=>{this.getQuestion()},3400);\r\n    }\r\n    \r\n    //Parse new options and generate new question\r\n    updateOptions = (e) => {\r\n        e.preventDefault();\r\n        console.log(e.target);\r\n        this.setState({\r\n            chosenCategory: \"&category=\"+e.target[0].value,\r\n            questionType: \"&type=\"+e.target[1].value\r\n        }, this.getQuestion);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"appContainer\">\r\n                <div className=\"menuCol\">\r\n                    <h1 className=\"title\">Tricky Trivia</h1>\r\n                    <h3 className=\"subtitle\">Options</h3>\r\n                    <div className=\"options\">\r\n                        <form onSubmit={this.updateOptions}>\r\n                            <label className=\"optionsLabel\">Category</label>\r\n                            <select name=\"chosenCategory\" id=\"categories\" className=\"optionDropdown\">\r\n                                {this.state.allCategories}\r\n                            </select>\r\n                            <label className=\"optionsLabel\">Type</label>\r\n                            <select name=\"questionType\" className=\"optionDropdown\">\r\n                                <option value=\"\">Any</option>\r\n                                <option value=\"multiple\">Multiple Choice</option>\r\n                                <option value=\"boolean\">True / False</option>\r\n                            </select>\r\n                            <button className=\"submitButton\">Get Questions!</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                <div className=\"content\">\r\n                    <Question questionText={this.state.question} difficulty={this.state.difficulty} category={this.state.category}/>\r\n                    <AnswerGrid type={this.state.multipleChoice} buttonsDisabled={this.state.buttonsDisabled} verifyAnswer={this.verifyAnswer} answers={this.state.answers} correctAnswer={this.state.correctAnswer} incorrectAnswers={this.state.incorrect_answers} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport \"./App.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}